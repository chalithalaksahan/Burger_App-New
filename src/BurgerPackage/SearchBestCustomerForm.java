/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package BurgerPackage;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import javax.swing.InputMap;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author USER
 */
public class SearchBestCustomerForm extends javax.swing.JFrame {
    
        
    private BurgerList burgerList;
    /**
     * Creates new form BurgerMainForm
     */
    public SearchBestCustomerForm(BurgerList burgerList) {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Search Best Customer");
        this.burgerList=burgerList;
        
       
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        jPanel1 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBestCustomer = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(new java.awt.Color(204, 0, 51));
        label1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Search Best Customers");

        btnExit.setBackground(new java.awt.Color(204, 0, 51));
        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 255, 255));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        tblBestCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Name", "Total"
            }
        ));
        tblBestCustomer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblBestCustomerFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(tblBestCustomer);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
       dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void tblBestCustomerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblBestCustomerFocusGained
          try {
            BufferedReader br =new BufferedReader(new FileReader("Burger.txt"));
            String line=br.readLine();

            new FileWriter("dupRemoveFile.txt", true).close();
             
            while(line!=null){
                  
                  String[] rowData = line.split(",");
                  
                   if (rowData.length > 1) {
                  String cusID = rowData[1];
                  
                  boolean duplicate = false;
                  BufferedReader checkBr = new BufferedReader(new FileReader("dupRemoveFile.txt"));
                  String checkLine;
                  
                  while((checkLine=checkBr.readLine())!=null){
                      if(checkLine.equals(cusID)){
                          duplicate = true;
                          break;
                      }
                  }
                  if(!duplicate){
                          FileWriter dupRemovefile = new FileWriter("dupRemoveFile.txt",true);
                          dupRemovefile.write(cusID+"\n");
                          dupRemovefile.close();
                      }
                  }
                  line=br.readLine();
                   
            }
            br.close();
            
            //-----------------------------------------------------------------------------------------------
            BufferedReader findBr = new BufferedReader (new FileReader("dupRemoveFile.txt"));
            String findLine = findBr.readLine();
            
             List<String> burgerData = new ArrayList<>();
             BufferedReader findCus = new BufferedReader(new FileReader("Burger.txt"));
             String cusLine = findCus.readLine();
             
             while(cusLine!=null){
                burgerData.add(cusLine);
                cusLine = findCus.readLine();
            }
            findCus.close();
               
                
            BufferedWriter tempTotal = new BufferedWriter(new FileWriter("temp.txt"));
            
            while(findLine!=null){
                int totalQty = 0;
                String name ="";
                for (String burgerLine : burgerData) {
                    String[] ar = burgerLine.split(",");
                    if(ar.length>=4 && findLine.equals(ar[1])){
                        totalQty += Integer.parseInt(ar[3]);
                        name = ar[2];
                    }
                        
                  
                }
                    String quantity = String.format("%d",totalQty);
                    tempTotal.write(findLine+","+name+","+quantity+"\n");
                    findLine = findBr.readLine();
                    
                   
                }
                tempTotal.close();
                findBr.close();
           // ----------------------------------------------------------------------------------------------------------------
           
            List<String> lines = new ArrayList<>();
            BufferedReader reader = new BufferedReader(new FileReader("temp.txt"));
            String line1;
            
            
           while ((line1 = reader.readLine()) != null) {
                lines.add(line1);
            }
            reader.close();
            
                lines.sort((a, b) -> {
                int qtyA = Integer.parseInt(a.split(",")[2]);
                int qtyB = Integer.parseInt(b.split(",")[2]);
                return qtyB - qtyA; 
            });
            BufferedWriter writer = new BufferedWriter(new FileWriter("sorted_file.txt"));
            for (String sortedLine : lines) {
                writer.write(sortedLine);
                writer.newLine();
            }
            writer.close();
            
        BufferedReader brTable =new BufferedReader(new FileReader("sorted_file.txt"));       
        DefaultTableModel dtm = (DefaultTableModel) tblBestCustomer.getModel();
        dtm.setRowCount(0);
        String tblLine = brTable.readLine();
        
          while(tblLine!=null){
                 
                  String[] rowData = tblLine.split(",");
                    if(tblLine.length()>=16){
                    
                       String total = String.format("%.2f", (Integer.parseInt(rowData[2])*Burger.burgerPrice));
                       String[] rowData1={rowData[0],rowData[1],total};
                       dtm.addRow(rowData1);
                    
                  }
                 tblLine = brTable.readLine();
              
              }
          brTable.close();
           
         } catch (IOException ex) {
             
         }
        //--------------------------------------------------------------------------------------------------------------------------       
       
//        Burger[] burgerArray=burgerList.findBestCustomer();
//    
//        for (Burger burger : burgerArray) {
//            Object[] rowData={burger.getCustomerId(),burger.getCustomerName(),burger.getOrderQty()*Burger.burgerPrice};
//            dtm.addRow(rowData);
//        }
    }//GEN-LAST:event_tblBestCustomerFocusGained


  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private javax.swing.JTable tblBestCustomer;
    // End of variables declaration//GEN-END:variables
}
